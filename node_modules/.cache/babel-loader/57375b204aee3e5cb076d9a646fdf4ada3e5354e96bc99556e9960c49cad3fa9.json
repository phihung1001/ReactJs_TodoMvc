{"ast":null,"code":"var _jsxFileName = \"D:\\\\WORKSPACE\\\\React\\\\projectw3\\\\src\\\\Components\\\\content\\\\TodoList.jsx\",\n  _s = $RefreshSig$();\nimport './TodoList.css';\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { ThemeContext } from '../../Context/Theme-Provider';\nimport Todo from '../todo/Todo';\nimport ScrollFunc from '../Hoc/ScrollHoc';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = ({\n  todoList,\n  recordsPerPage,\n  isCheckAll,\n  checkAllTodo,\n  getTodoEditId,\n  onEditTodo,\n  markCompleted,\n  removeTodo\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const lastIndex = currentPage * recordsPerPage;\n  const newList = todoList.slice(0, lastIndex);\n  const {\n    theme\n  } = useContext(ThemeContext);\n\n  // console.log(recordsPerPage);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const handleScroll = () => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n      setTimeout(() => {\n        setCurrentPage(prevPage => prevPage + 1);\n      }, 1000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"main\",\n    ref: scrollRef,\n    onScroll: onScroll,\n    style: {\n      backgroundColor: theme.background,\n      color: theme.foreground\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"toggle-all\",\n      type: \"checkbox\",\n      checked: isCheckAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"toggle-all\",\n      onClick: checkAllTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      class: \"todo-list\",\n      children: newList.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n        theme: theme,\n        todo: todo,\n        getTodoEditId: getTodoEditId,\n        onEditTodo: onEditTodo,\n        markCompleted: markCompleted,\n        removeTodo: removeTodo\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_s(TodoList, \"ELuhHEoG9tL6i90sCyIqHdIOHSM=\");\n_c = TodoList;\nconst mapStateToProps = state => {\n  return {\n    todoList: state.todos.todoList\n  };\n};\nexport default connect(mapStateToProps)(TodoList);\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","ThemeContext","Todo","ScrollFunc","connect","jsxDEV","_jsxDEV","TodoList","todoList","recordsPerPage","isCheckAll","checkAllTodo","getTodoEditId","onEditTodo","markCompleted","removeTodo","_s","currentPage","setCurrentPage","lastIndex","newList","slice","theme","window","addEventListener","handleScroll","removeEventListener","innerHeight","scrollY","document","body","offsetHeight","setTimeout","prevPage","className","ref","scrollRef","onScroll","style","backgroundColor","background","color","foreground","children","type","checked","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onClick","class","map","todo","id","_c","mapStateToProps","state","todos","$RefreshReg$"],"sources":["D:/WORKSPACE/React/projectw3/src/Components/content/TodoList.jsx"],"sourcesContent":["import './TodoList.css';\nimport React, { useState,useEffect,useContext } from \"react\";\nimport { ThemeContext  } from '../../Context/Theme-Provider';\nimport Todo from '../todo/Todo';\nimport ScrollFunc from '../Hoc/ScrollHoc';\nimport { connect } from 'react-redux';\n\nconst TodoList = ({ todoList,recordsPerPage, isCheckAll, checkAllTodo, getTodoEditId, onEditTodo, markCompleted,removeTodo}) => {\n  const [currentPage, setCurrentPage ] = useState(1);\n  const lastIndex = currentPage * recordsPerPage\n  const newList = todoList.slice(0, lastIndex);\n  const { theme } = useContext(ThemeContext);\n\n  // console.log(recordsPerPage);\n  \n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  const handleScroll = () => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n      setTimeout(() => {\n        setCurrentPage(prevPage => prevPage + 1);\n      }, 1000);\n    }\n  };\n\n    return (\n         <section className='main'  ref={scrollRef}  onScroll={onScroll} style={{ backgroundColor: theme.background, color: theme.foreground }}>\n          \n            <input className='toggle-all' type='checkbox' checked={isCheckAll}/>\n            <label htmlFor=\"toggle-all\" onClick={checkAllTodo}></label>\n            <ul class=\"todo-list\">\n                { \n                  newList.map((todo) =>  \n                    <Todo \n                      theme={theme}\n                      key={todo.id} \n                      todo={todo} \n                      getTodoEditId={getTodoEditId}\n                      onEditTodo={onEditTodo}\n                      markCompleted={markCompleted}\n                      removeTodo={removeTodo}\n                    />\n                  )\n                }\n            </ul>\n         </section>\n  )\n}\nconst mapStateToProps = (state) => {\n  return {\n    todoList: state.todos.todoList\n  }\n}\nexport default connect(mapStateToProps)(TodoList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}