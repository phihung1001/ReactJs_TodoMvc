{"ast":null,"code":"var _jsxFileName = \"D:\\\\WORKSPACE\\\\React\\\\projectw3\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, lazy } from \"react\";\nimport './App.css';\nimport TodoList from './Components/content/TodoList';\nimport Footer from './Components/footer/Footer';\nimport Header from './Components/header/Header';\nimport Panigation from './Components/pagination/Pagination';\nimport ReactPaginate from 'react-paginate';\nimport ThemeBtn from './Components/Theme-Btn';\nimport { ThemeContext } from \"./Context/Theme-Provider\";\nimport { produce } from 'immer';\nimport { useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [todoList, setTodoList] = useState([]);\n  const [isCheckAll, setIscheckAll] = useState(false);\n  const [status, setStatus] = useState('ALL');\n  const headerRef = useRef();\n\n  // const componentWillMount = () => {\n  //     setIscheckAll(!isNotCheckAll(todoList) )\n  // }\n\n  // const getTodoEditId = (id) => {\n  //     const todo = todoList.find(todo => id === todo.id);\n  //     const name = todo.name;\n  //     headerRef.current.updateState(id,name);\n  // }\n\n  // const onEditTodo= (todo = {}, id =-1) => {\n  //   if(id >=0) {\n  //     const updatedList =todoList.map(item => item.id===id ? ({...item, name: todo.name}) : item)\n\n  //    // console.log(todo)\n  //     //console.log(updatedList.map(item => item))\n  //     setTodoList(updatedList);\n  //   }\n  // }\n\n  // const markCompleted = (id = '') => {\n  //   const updatedList = todoList.map(todo =>  todo.id ===id ? ({...todo, isCheck: !todo.isCheck}) : todo )\n  //   setTodoList(updatedList);\n  //   setIscheckAll(!isNotCheckAll(updatedList) )\n  // }\n\n  // const checkAllTodo = () => {\n  //     const updatedList = todoList.map(todo => ({...todo ,isCheck:!isCheckAll})); \n  //     setTodoList(updatedList)\n  //     setIscheckAll(!isCheckAll)\n  // }\n\n  // const setStatusFilter = (status ='') =>{\n  //   setStatus(status);\n  // }\n\n  // const clearCompleted = () => {\n  //   setTodoList(filterBystatus(todoList,'ACTIVE'))\n  // }\n  // const removeTodo = ( id ='') => {\n  //   setTodoList(filterBystatus(todoList,'REMOVE',id))\n  // }\n\n  //   const prePage = () => {\n  //     if (currentPage !== 1) setCurrentPage(currentPage - 1);\n  //   }\n  //   const nextPage = () => {\n  //     const npage = Math.ceil(todoList.length / recordsPerPage)\n  //     if (currentPage !== npage) setCurrentPage(currentPage + 1);\n  //   }\n\n  //   const changePage = (id) => {\n  //     setCurrentPage(id);\n  //  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp\",\n    children: [/*#__PURE__*/_jsxDEV(ThemeBtn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Header\n    //ref={headerRef}\n    // onEditTodo ={onEditTodo}\n    //isCheckAll ={isCheckAll}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(TodoList\n    //todoList={filterBystatus(todoList,status)}\n    //currentPage={currentPage}\n    // getTodoEditId = {getTodoEditId}\n    // onEditTodo = {onEditTodo}\n    //markCompleted ={markCompleted}\n    // isCheckAll ={isCheckAll}\n    //checkAllTodo={checkAllTodo}\n    //removeTodo = {removeTodo}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Footer\n    //setStatusFilter={setStatusFilter}\n    // status={status}\n    //clearCompleted = {clearCompleted}\n    //numOfTodoLeft = {filterBystatus(todoList,'ACTIVE').length}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"xnvO1pwADWUI1dGdefAxtwsBaDo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","lazy","TodoList","Footer","Header","Panigation","ReactPaginate","ThemeBtn","ThemeContext","produce","useMemo","useState","jsxDEV","_jsxDEV","App","_s","todoList","setTodoList","isCheckAll","setIscheckAll","status","setStatus","headerRef","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/WORKSPACE/React/projectw3/src/App.js"],"sourcesContent":["import React, {useRef,lazy } from \"react\";\nimport './App.css';\nimport TodoList from './Components/content/TodoList';\nimport Footer from './Components/footer/Footer';\nimport Header from './Components/header/Header';\nimport Panigation from './Components/pagination/Pagination';\nimport ReactPaginate from 'react-paginate';\nimport ThemeBtn from './Components/Theme-Btn';\nimport { ThemeContext } from \"./Context/Theme-Provider\";\nimport {  produce } from 'immer';\n\nimport { useMemo, useState } from \"react\";\n\n\n\nconst App = () => {\n  const [todoList, setTodoList ] = useState([\n  ]);\n  const [isCheckAll, setIscheckAll ] = useState(false);\n  const [status, setStatus ] = useState('ALL');\n  const headerRef = useRef();\n  \n  \n\n  // const componentWillMount = () => {\n  //     setIscheckAll(!isNotCheckAll(todoList) )\n  // }\n\n  \n  // const getTodoEditId = (id) => {\n  //     const todo = todoList.find(todo => id === todo.id);\n  //     const name = todo.name;\n  //     headerRef.current.updateState(id,name);\n  // }\n\n  // const onEditTodo= (todo = {}, id =-1) => {\n  //   if(id >=0) {\n  //     const updatedList =todoList.map(item => item.id===id ? ({...item, name: todo.name}) : item)\n      \n  //    // console.log(todo)\n  //     //console.log(updatedList.map(item => item))\n  //     setTodoList(updatedList);\n  //   }\n  // }\n\n  // const markCompleted = (id = '') => {\n  //   const updatedList = todoList.map(todo =>  todo.id ===id ? ({...todo, isCheck: !todo.isCheck}) : todo )\n  //   setTodoList(updatedList);\n  //   setIscheckAll(!isNotCheckAll(updatedList) )\n  // }\n\n  // const checkAllTodo = () => {\n  //     const updatedList = todoList.map(todo => ({...todo ,isCheck:!isCheckAll})); \n  //     setTodoList(updatedList)\n  //     setIscheckAll(!isCheckAll)\n  // }\n\n  // const setStatusFilter = (status ='') =>{\n  //   setStatus(status);\n  // }\n\n  // const clearCompleted = () => {\n  //   setTodoList(filterBystatus(todoList,'ACTIVE'))\n  // }\n  // const removeTodo = ( id ='') => {\n  //   setTodoList(filterBystatus(todoList,'REMOVE',id))\n  // }\n\n//   const prePage = () => {\n//     if (currentPage !== 1) setCurrentPage(currentPage - 1);\n//   }\n//   const nextPage = () => {\n//     const npage = Math.ceil(todoList.length / recordsPerPage)\n//     if (currentPage !== npage) setCurrentPage(currentPage + 1);\n//   }\n \n//   const changePage = (id) => {\n//     setCurrentPage(id);\n//  }\n\n  return (\n       \n      <div className=\"todoapp\">\n        <ThemeBtn/>\n         <Header  \n             //ref={headerRef}\n            // onEditTodo ={onEditTodo}\n             //isCheckAll ={isCheckAll}\n          />\n         <TodoList \n             //todoList={filterBystatus(todoList,status)}\n            //currentPage={currentPage}\n            // getTodoEditId = {getTodoEditId}\n            // onEditTodo = {onEditTodo}\n             //markCompleted ={markCompleted}\n            // isCheckAll ={isCheckAll}\n             //checkAllTodo={checkAllTodo}\n             //removeTodo = {removeTodo}\n           \n          /> \n         <Footer\n            //setStatusFilter={setStatusFilter}\n           // status={status}\n            //clearCompleted = {clearCompleted}\n            //numOfTodoLeft = {filterBystatus(todoList,'ACTIVE').length}\n         />\n         {/* <Panigation \n             ref={pageRef}\n             prePage = {prePage}\n             nextPage = {nextPage}\n             changePage = {changePage}\n             numbers = {numbers}\n         />    */}\n      </div>\n    )\n }\n\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAACC,IAAI,QAAQ,OAAO;AACzC,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAAUC,OAAO,QAAQ,OAAO;AAEhC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAE,GAAGN,QAAQ,CAAC,EACzC,CAAC;EACF,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAE,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACpD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAE,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC5C,MAAMW,SAAS,GAAGtB,MAAM,CAAC,CAAC;;EAI1B;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEE,oBAEIa,OAAA;IAAKU,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBX,OAAA,CAACN,QAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACVf,OAAA,CAACT;IACG;IACD;IACC;IAAA;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACHf,OAAA,CAACX;IACG;IACD;IACA;IACA;IACC;IACD;IACC;IACA;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC,eACHf,OAAA,CAACV;IACE;IACD;IACC;IACA;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQA,CAAC;AAEX,CAAC;AAAAb,EAAA,CApGID,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAuGT,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}